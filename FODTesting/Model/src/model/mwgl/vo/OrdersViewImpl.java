package model.mwgl.vo;

import java.sql.ResultSet;

import model.mwgl.vo.common.OrdersView;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 05 05:53:02 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrdersViewImpl extends ViewObjectImpl implements OrdersView {
    /**
     * This is the default constructor (do not remove).
     */
    public OrdersViewImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object[] params,
                                             int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc,
                                                 ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * @throws JboException
     * 1)get order row
     * 2)check order status pending
     * 3)change status to cancel
     * 4)save changes
     * 5)show failure and success messages
     */
    public void cancelOrder() throws JboException{
        Row currentRow = this.getCurrentRow();
        if(currentRow!=null){
            String orderStatusCode = (String)currentRow.getAttribute("OrderStatusCode");
            if(orderStatusCode != null && orderStatusCode.equalsIgnoreCase("PENDING")){
                currentRow.setAttribute("OrderStatusCode", "CANCEL");
                this.getDBTransaction().commit();
            } else {
                throw new JboException( "You cannnot cancel and order that does not have a 'PENDING' status." );
            }
        }
    }
}
